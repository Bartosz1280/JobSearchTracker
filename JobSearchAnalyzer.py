import pandas as pd
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt
from datetime import date



class JobSearchAnalyzer:
    """
    Class that integrates plotting tools and
    data processing tools for display state
    of current job applications

    Intakes a pd.DataFrame instance generated by
    JobSearchdb instance
    """
    def __init__(self, data_frame: pd.DataFrame):

        # Function run on init
        def columns_check(data_frame_to_check):
            cols =['ApplicationID', 'Position', 'Company', 'Link', 'ApplicationDate',
                    'TypeCompany', 'ApplicationStatus', 'ResponseDate', 'InterviewDate',
                    'TaskDate', 'TechnicalInterviewDate', 'AcceptanceDate', 'RejectionDate',
                    'RejectionReason', 'Notes', 'Modified']
            logical_vector =  list(map(lambda x: x in cols,data_frame_to_check.columns))
            if False in logical_vector:
                wrong_key = data_frame_to_check.columns[logical_vector.index(False)]
                err_str = f"Column {wrong_key} is not a column allowed for MyJobSearch table."
                raise KeyError (err_str)
            else:
                return(data_frame_to_check)

        # Attributes
        self.applications = columns_check(data_frame)

    def __str__(self):
        self.applications.sort_values('ApplicationDate',ascending=False, inplace=True)
        return f"""
        === Summary of your applications status ===
            Date: {date.today()}
            Number of applications: {self.applications.shape[0]}
            Number of companies: {len(set(self.applications["Company"]))}
        
        --- Last application ---
            Position: {self.applications.iloc[0]['Position']}
            Company: {self.applications.iloc[0]['Company']}
            Date: {str(self.applications.iloc[0]['ApplicationDate'].date())}
        """

    def barplot_company(self, save=False):
        f, ax = plt.subplots(figsize=(7, 5))
        ax.set_xticks(range(0,self.applications["Company"].value_counts().max()+1))
        b_plot=sns.histplot(self.applications, y="Company", hue="TypeCompany")
        b_plot.set(title=f'Number of application per company\n {str(date.today())}')
        if save:
            today_str= "_".join(str(date.today()).split("-"))
            file_str = f"applications_per_company_{today_str}.png"
            print(f">Saving a plot as {file_str}")
            plt.savefig("seaborn_plot.png")
